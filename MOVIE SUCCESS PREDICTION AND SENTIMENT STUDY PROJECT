movie-success-prediction-sentiment/
│
├── data/
│   ├── imdb_movies.csv              # Movie metadata
│   ├── user_reviews.csv             # Collected or scraped reviews
│
├── notebooks/
│   ├── 1_data_preprocessing.ipynb   # Load, clean movie and review data
│   ├── 2_sentiment_analysis.ipynb   # VADER sentiment analysis
│   ├── 3_regression_model.ipynb     # Predict box office success
│   ├── 4_genre_sentiment_trends.ipynb # Analyze sentiment by genre
│
├── visuals/
│   ├── sentiment_distribution.png   # Example visualization
│   ├── genre_sentiment_trends.png   # Another visualization
│
├── requirements.txt                 # Python dependencies
├── README.md                        # Project description
├── .gitignore

✅ requirements.txt
pandas
numpy
matplotlib
seaborn
nltk
scikit-learn
vaderSentiment

📁 1_data_preprocessing.ipynb
import pandas as pd

# Load movie metadata
movies = pd.read_csv('../data/imdb_movies.csv')

# Load user reviews
reviews = pd.read_csv('../data/user_reviews.csv')

# Basic cleaning
movies.dropna(subset=['Title', 'BoxOffice'], inplace=True)
reviews.dropna(subset=['review_text'], inplace=True)

# Display samples
print(movies.head())
print(reviews.head())

📁 2_sentiment_analysis.ipynb
import pandas as pd
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer

reviews = pd.read_csv('../data/user_reviews.csv')
analyzer = SentimentIntensityAnalyzer()

# Add sentiment scores
reviews['sentiment'] = reviews['review_text'].apply(lambda x: analyzer.polarity_scores(x)['compound'])

# Save updated data
reviews.to_csv('../data/reviews_with_sentiment.csv', index=False)

# Visualization
import seaborn as sns
import matplotlib.pyplot as plt

sns.histplot(reviews['sentiment'], kde=True)
plt.title('Distribution of Review Sentiments')
plt.savefig('../visuals/sentiment_distribution.png')

📁 3_regression_model.ipynb
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score

# Assume preprocessed data
movies = pd.read_csv('../data/imdb_movies.csv')

# Example features
X = movies[['imdbRating', 'Metascore', 'Runtime']]
y = movies['BoxOffice']

# Fill missing values
X.fillna(X.mean(), inplace=True)
y.fillna(y.mean(), inplace=True)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

model = LinearRegression()
model.fit(X_train, y_train)

predictions = model.predict(X_test)

print("R2 Score:", r2_score(y_test, predictions))

📁 4_genre_sentiment_trends.ipynb
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Merge movies and reviews
reviews = pd.read_csv('../data/reviews_with_sentiment.csv')
movies = pd.read_csv('../data/imdb_movies.csv')

merged = pd.merge(reviews, movies, on='movie_id')

# Average sentiment per genre
genre_sentiment = merged.groupby('Genre')['sentiment'].mean().sort_values()

# Plot
plt.figure(figsize=(10, 6))
genre_sentiment.plot(kind='barh', color='skyblue')
plt.title('Average Sentiment by Genre')
plt.xlabel('Sentiment Score')
plt.savefig('../visuals/genre_sentiment_trends.png')



